#!/bin/sh
#
# Main Script
#
# shellcheck disable=SC2039

# --------------
# Setup
# --------------

set -euo pipefail
IFS=$'\n\t'

. "scripts/globals.sh"

# --------------
# Functions
# --------------

main() {
  if [ "$(id -u)" == "0" ]; then
    echo "FAILURE: This script must not be run as root"
    exit 1
  fi

  COMMAND_TYPE=${1:-}

  git submodule update --init

  echo 'Setting up Homebrew'
  install_homebrew

  echo 'Setting up ZSH'
  install_zsh

  echo 'Setting up Resources'
  install_resources

  echo 'Setting up macOS Prefs'
  install_macos_prefs

  echo 'Setting up Ruby'
  install_ruby

  echo 'Setting up Mint'
  install_mint

  echo 'Setting up NPM'
  install_npm
}

# --------------
# Installs
# --------------

install_resources() {

  readonly dev_configs=(
    '.prettierrc.yml'
  )

  for config in "${dev_configs[@]}"; do
    rm ~/"$config" || echo "Installing $config"
    ln -s ~/.dotfiles/"$config" ~/"$config"
  done

  readonly resource_configs=(
    '.gitconfig'
    '.bashrc'
    '.bash_profile'
    '.vimrc'
    '.zshrc'
    'Library/Application Support/Code/User/settings.json'
    'Library/Application Support/SourceTree/browser.plist'
    'Library/Preferences/com.apple.Terminal.plist'
    'Library/Preferences/com.googlecode.iterm2'
  )

  for config in "${resource_configs[@]}"; do
    local dir_name
    dir_name=$(dirname "$config")
    test -d "${dir_name}" || mkdir -p "${dir_name}"

    rm ~/"$config" || echo "Installing $config"
    ln -s ~/.dotfiles/resources/"$config" ~/"$config"
  done

  readonly private_configs=(
    '.netrc'
  )

  for config in "${private_configs[@]}"; do
    local dir_name
    dir_name=$(dirname "$config")
    test -d "${dir_name}" || mkdir -p "${dir_name}"

    rm ~/"$config" || echo "Installing $config"
    ln -s ~/.dotfiles/private/resources/"$config" ~/"$config"
  done
}

install_homebrew() {
  sudo chown -R "$(whoami)" \
    /usr/local/bin \
    /usr/local/lib \
    /usr/local/sbin

  if ! [ -x "$(command -v brew)" ]; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  case "$COMMAND_TYPE" in
  "update")
    brew upgrade
    brew bundle
    ;;
  *) brew bundle check || brew bundle ;;
  esac
}

install_zsh() {
  if ! [ -d ~/.oh-my-zsh ]; then
    sudo sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  fi
}

install_macos_prefs() {
  # Screenshots

  SCREENSHOTDIR="${HOME}/Pictures/Screenshots"

  test -d "${SCREENSHOTDIR}" || mkdir "${SCREENSHOTDIR}"

  defaults write com.apple.screencapture location "$SCREENSHOTDIR"

  # Dock Prefs

  defaults write com.apple.dock autohide -bool yes
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock autohide-time-modifier -float 0.14999999999999999

  # Keyboard

  defaults write -g InitialKeyRepeat -int 15
  defaults write -g KeyRepeat -int 2

  killall Dock

  # Xcode

  if [[ "$(xcode-select -p)" == "" ]]; then
    xcode-select --install
  fi
}

install_ruby() {
  local ruby_version
  ruby_version=$(cat ".ruby-version")

  rbenv install --skip-existing "$ruby_version"
  rbenv global "$ruby_version"

  if [ ! "$(gem list bundler -i)" ]; then
    gem install bundler
  fi

  if [[ $COMMAND_TYPE == "update" ]]; then
    gem install bundler
    bundle update
  fi

  bundle install --system
}

install_mint() {
  mint bootstrap

  while read -r mint_dep; do
    mint install "$mint_dep"
  done <Mintfile

  if [[ $COMMAND_TYPE == "update" ]]; then
    cd sourcekit-lsp/ || exit
    swift build
    mv .build/debug/sourcekit-lsp /usr/local/bin

    cd ../ || exit
  fi
}

install_npm() {
  if [[ $COMMAND_TYPE == "update" ]]; then
    npm install -g npm
  fi

  for dep in "${NPM_DEPS[@]}"; do
    if npm list -g "$dep" | grep -q "$dep"; then
      if [[ $COMMAND_TYPE != "update" ]]; then
        continue
      fi
    fi

    npm install "$dep" -g
  done
}

# --------------
# Main Script
# --------------

main "$@"
